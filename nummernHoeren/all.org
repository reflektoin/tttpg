#+title: All

* Description
User will hear a number by clicking the button "Wiederholen".
They can then click one of the options below. Clicking a button will repeat the sound.
After their selection they can press "Überprüfen" to check whether they selected the correct option.

If the choice was correct the Überprüfen button will change color to green and it's text will change to "Richtig!". If the answer was wrong, the button will turn red and text "Versuch nochmal" will appear.

By loading the page again another number will be quizzed.

* Functionalities
** Repeat Button / New Number Button
** Choice buttons
** Check Answer button


* ISSUES
** TODO Check button disappers
Check button disappears when developer console is opened.
* IDEAS
** DONE Stylize buttons "Wiederholen" and "Überprüfen" to diffently from answer options
:PROPERTIES:
:CUSTOM_ID: Stylize-wiederholen-überprüfen-buttons
:END:
** Reduce number of answer options
Now "Wiederholen" button overlaps with some of the choice options.
** Generate random answer options
** Add option quiz specific set of numbers
** Add option to quiz specific range of numbers
** DONE Split js_file code block into separate blocks
Split related rows into their own blocks. Aim is to make it easier to refer to them and comment on them.
** Change vocabulary used to match Multiple choice terminology
Currently source code contains haphazardly used vocabulary/terminology. Maybe aim could be to talk about concepts using words in Wikipedia's [[https://en.wikipedia.org/wiki/Multiple_choice][multiple choice article]].
** TODO Provide a way to quiz another sound?
Currently a new sound is available only when page is reloaded. Provide a way to get a new question without reloading. For example a button to play another sound.

Maybe the "Wiederholen" button could be changed to ask if user wants another number question.
*** Wiederholen button
- HTML: [[*Repeat div][Repeat div]]
- JS: [[*Add eventListener to repeatBtn][Add eventListener to repeatBtn]]

*** Implementation
- Add class newNumber to button element in [[*Repeat div][Repeat div]]
- Add styling for class newNumber
- modify eventListener of repeatBtn: [[*Add eventListener to repeatBtn][eventListener of repeatBtn]]

** Design for both laptop/desktop and cellphone monitors
** DONE Remove the overlapping of buttons
Now answer option buttons are partially blocked by "Wiederholen" button and "Überprüfen" button is not visible unless user zooms out. This is on screen with resolution 1920x1080.
*** Background knowledge
Some components related to this:
- [[*Repeat div][Repeat div]]
- [[*Answer options][Answer options]]
- [[*Check div][Check div]]
** Add link pointing to the homepage.
** Add linking pointing to the source code

* Building the page

** Sound files
The sound files are downloaded from the [[https://de.wiktionary.org/wiki/zwei][German wiktionary]]. The first four numbers (zero to three) I've downloaded manually, but if I'm going to add tens of hundreds of numbers I'd like to do it programmatically.


** HTML file
First we'll create an index.html file.

#+name: html_file
#+begin_src html :tangle index.html :comments link :noweb yes
<!DOCTYPE html>
<html lang="en">
#+end_src

#+name: head_element
#+begin_src html :tangle index.html :comments link
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Nummern hören</title>
</head>
#+end_src

#+name: begin_body
#+begin_src html :tangle index.html :comments link
<body>
#+end_src

*** Repeat div
The div with id 'repeat' acts as a container for the button with id 'repeatBtn'.
#+name: repeatDiv
#+begin_src html :tangle index.html :comments link
    <div id="repeat">
        <button id="repeatBtn" class="btn repeatBtn ">Wiederholen</button>
    </div>
#+end_src

*** Answer options
All possible answer options will be appended to the element below.
#+name: answer_options
#+begin_src html :tangle index.html :comments link
    <div id="buttons">

    </div>
#+end_src

*** Check div
Button for checking the answer will be added to this in script.js file.
#+name: check_answer
#+begin_src html :tangle index.html :comments link
    <div id="check">
    </div>
#+end_src

*** Footer
#+name: footer_element
#+begin_src html :tangle index.html :comments link
    <footer>License (CC BY-SA 3.0) for sounds: <a
            href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">here</a><br>
        Source for sounds: <a href="https://de.wiktionary.org/wiki/Datei:De-eins.ogg">here</a>
    </footer>
#+end_src


*** Script element
Refer to the script.js file using [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script][script element]].
#+name: script_element
#+begin_src html :tangle index.html :comments link
    <script src="script.js"></script>
#+end_src

*** End body and html elements
#+name: end_body
#+begin_src html :tangle index.html :comments link
</body>
#+end_src

#+name: end_html
#+begin_src html :tangle index.html :comments link
</html>
#+end_src

Next we'll create a css file called style.css


** CSS file
#+name: css_file
#+begin_src css :tangle style.css :comments link
@import url('https://fonts.googleapis.com/css?family=Ubuntu');
#+end_src

#+name: global_styling
#+begin_src css :tangle style.css :comments link
,* {
    box-sizing: border-box;
}
#+end_src

#+name: body_styling
#+begin_src css :tangle style.css :comments link
body {
    background-color: rgb(161,100,223);
    font-family: 'Ubuntu', sans-serif;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    text-align: center;
    margin: 0;
    overflow: hidden;
    height: 100vh;
}
#+end_src

#+name: footer_styling
#+begin_src css :tangle style.css :comments link
footer {
    position: absolute;
    bottom: 10px;
}
#+end_src


#+name: btn_class_styling
#+begin_src css :tangle style.css :comments link
.btn {
    background-color: rebeccapurple;
    border-radius: 5px;
    border: none;
    color: #fff;
    margin: 1rem;
    padding: 1.5rem 3rem;
    font-size: 1.2rem;
    font-family: inherit;
    cursor: pointer;
}
#+end_src

#+name: repeatBtn_styling
#+begin_src css :tangle style.css :comments link
.btn.repeatBtn{
    background-color: #444444;
    font-size: 2rem;

}

.newNumber {
    animation: reveal 0.5s ease-in;
}

@keyframes reveal {
    0% {
        transform: scale(0);
    }
    100% {
        transform: scale(1);
    }
}
#+end_src

https://developer.mozilla.org/en-US/docs/Web/CSS/:hover
#+name: btn_hover_styling
#+begin_src css :tangle style.css :comments link
.btn:hover {
    opacity: 0.9;
}
#+end_src

#+name: btn_focus_styling
#+begin_src css :tangle style.css :comments link
.btn:focus {
    outline: none;
}
#+end_src


https://developer.mozilla.org/en-US/docs/Web/CSS/:active
#+name: btn_active_styling
#+begin_src css :tangle style.css :comments link
.btn:active {
    scale: 0.95;
}
#+end_src

This defines how the user's selected option (the button which was clicked) is being stylized.
#+name: btn_selected_styling
#+begin_src css :tangle style.css :comments link
.btn.selected {
    opacity: 0.5;
}
#+end_src

#+name: repeat_id_styling
#+begin_src css :tangle style.css :comments link
#repeat {
    display: inline-block;
    top: 2.5%;
}
#+end_src

#+name: buttons-container_styling
#+begin_src css :tangle style.css :comments link
#buttons {
    display: inline-block;
    overflow-y: scroll;
    max-height: 500px;
}


#+end_src
#+name: btn_check_styling
#+begin_src css :tangle style.css :comments link
.btn.check {
    background-color: #1739dd;
    margin: 50px;
}
#+end_src

#+name: btn_check_wrong_styling
#+begin_src css :tangle style.css :comments link
.btn.check.wrong {
    background-color: red;
}
#+end_src

#+name: btn_correct_styling
#+begin_src css :tangle style.css :comments link
.btn.correct{
    background-color: green;
}
#+end_src


https://developer.mozilla.org/en-US/docs/Web/CSS/@media
#+name: small_screen styling
#+begin_src css :tangle style.css :comments link
@media(max-width: 500px){
    .btn {
        font-size: 0.8rem;
    }
}
#+end_src


** JavaScript file

#+name: sounds_def
#+begin_src javascript :tangle script.js :comments link
const sounds = [
  'null',
  'eins',
  'zwei',
  'drei',
  'fünf',
  'sechs',
  'sieben',
  'acht',
  'neun',
  'zehn',
  'elf',
  'zwölf',
  'dreizehn',
  'vierzehn',
  'fünfzehn',
  'sechzehn',
  'siebzehn',
  'achtzehn',
  'neunzehn',
  'zwanzig',
  'einundzwanzig',
  'zweiundzwanzig',
  'dreiundzwanzig',
  'vierundzwanzig',
  'fünfundzwanzig',
  'sechsundzwanzig',
  'siebenundzwanzig',
  'achtundzwanzig',
  'neunundzwanzig',
  'dreißig',
  'einunddreißig',
  'zweiunddreißig',
  'dreiunddreißig',
  'vierunddreißig',
  'fünfunddreißig',
  'sechsunddreißig',
  'siebenunddreißig',
  'achtunddreißig',
  'neununddreißig',
  'vierzig',
  'einundvierzig',
  'zweiundvierzig',
  'dreiundvierzig',
  'vierundvierzig',
  'fünfundvierzig',
  'sechsundvierzig',
  'siebenundvierzig',
  'achtundvierzig',
  'neunundvierzig',
  'fünfzig',
  'einundfünfzig',
  'zweiundfünfzig',
  'dreiundfünfzig',
  'vierundfünfzig',
  'fünfundfünfzig'
];
#+end_src

*** AddSounds function definition and call

#+name: addSounds
#+begin_src javascript :tangle script.js :comments link
addSounds()
function addSounds() {
  sounds.forEach((sound) => {
    const body = document.querySelector('body')
    const soundEl = document.createElement('audio')
    soundEl.id = sound
    soundEl.src = `sounds/De-${sound}.ogg`
    body.appendChild(soundEl)
  });
}
#+end_src

*** Variable definitions

#+name: variable_definitions
#+begin_src javascript :tangle script.js :comments link
let guessedAnswer = ''
let correctNumber = getRandomNumberSound()
const repeatBtn = document.querySelector('.btn.repeatBtn')
const checkEl = document.getElementById('check')
const checkBtn = document.createElement('button')
#+end_src


*** Generate and add sound buttons
#+name: js-sound-buttons
#+begin_src javascript :tangle script.js :comments link
sounds.forEach(sound => {
  const btn = document.createElement('button')
  btn.classList.add('btn');
  btn.classList.add('options');

  btn.innerText = sound;

  btn.addEventListener('click', () => {
    resetCheckBtn()
    clearSelection()
    stopSongs();
    document.getElementById(sound).play()
    guessedAnswer = sound

    //add indicator for selected answer
    btn.classList.add('selected')
  })

  document.getElementById('buttons').
    appendChild(btn);
})
#+end_src

*** Generate and add check button

#+name: js_checkBtn
#+begin_src javascript :tangle script.js :comments link
checkBtn.innerText = 'Überpfüfen'
checkBtn.classList.add('btn');
checkBtn.classList.add('check')
checkBtn.addEventListener('click', () => {
  //remove correct and wrong classes in case user had already guessed
  checkBtn.classList.remove('correct')
  checkBtn.classList.remove('right')
  let correctAnswer = sounds[correctNumber]
  if (guessedAnswer === correctAnswer) {
    console.log('Correct answer')

    //add class "correct" in order to stylize it to show that the answer was correct
    checkBtn.classList.add('correct')
    checkBtn.innerText = 'Richtig!'

    //modify wiederholen button to ask if user wants to be asked another number
    repeatBtn.innerText = 'Neu Nummer?'
    correctNumber = getRandomNumberSound()

    repeatBtn.classList.add('newNumber')
  } else {
    console.log('Wrong answer')
    checkBtn.classList.add('wrong')
    checkBtn.innerText = 'Versuch nochmal'
  }
})
checkEl.appendChild(checkBtn)
#+end_src


*** stopSongs function definition
This is used to stop playing sounds.
Scenario: User tries to play another sound while previous one is still playing. The program then stops the first sound so that only one sound will be played at a time.

Used in:
- [[*Generate and add sound buttons][Generate and add sound buttons]]

#+name: js_stopSongs_def
#+begin_src javascript :tangle script.js :comments link
function stopSongs() {
  sounds.forEach(sound => {
    const song = document.getElementById(sound)
    song.pause();
    song.currentTime = 0;
  })
}
#+end_src


*** getRandomNumberSound

#+name: js_getRandomNumberSound_def
#+begin_src javascript :tangle script.js :comments link
function getRandomNumberSound() {
  return Math.floor(Math.random() * sounds.length)
}
#+end_src


*** clearSelection definition
This is called to remove selection styling from other buttons when user clicks on an answer option.

#+name: js_clearSelection_def
#+begin_src javascript :tangle script.js :comments link
function clearSelection() {
  btns = document.querySelectorAll('.options')
  console.log('clear selection')
  btns.forEach((btn) => {
    btn.classList.remove('selected')
  })
}
#+end_src

*** resetCheckBtn definition
This is called when user clicks on an answer choice. They might have already checked whether their answer was correct and the buttons state would have changed. This returns button to it's starting state.
#+name: js_resetCheckBtn_def
#+begin_src javascript :tangle script.js :comments link
function resetCheckBtn() {
  const checkBtn = document.querySelector('#check button')
  checkBtn.innerText = 'Überpfüfen'
  checkBtn.classList.remove('wrong')
  checkBtn.classList.remove('correct')
}
#+end_src

*** Add eventListener to repeatBtn

#+name: js-repeatBtnEventListener
#+begin_src javascript :tangle script.js :comments link
repeatBtn.addEventListener('click', () => {
  if(repeatBtn.classList.contains('newNumber')){
    document.getElementById(sounds[correctNumber]).play()
    resetCheckBtn()
    clearSelection()
    repeatBtn.innerText = 'Wiederholen'
    repeatBtn.classList.remove('newNumber')
  }else {
  document.getElementById(sounds[correctNumber]).play()
  }
})
#+end_src
